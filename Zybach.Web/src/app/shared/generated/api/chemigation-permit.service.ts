/**
 * Zybach.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ChemigationPermitDetailedDto } from '../model/chemigation-permit-detailed-dto';
import { ChemigationPermitDto } from '../model/chemigation-permit-dto';
import { ChemigationPermitNewDto } from '../model/chemigation-permit-new-dto';
import { ChemigationPermitStatusDto } from '../model/chemigation-permit-status-dto';
import { ChemigationPermitUpsertDto } from '../model/chemigation-permit-upsert-dto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { catchError } from 'rxjs/operators';
import { ApiService } from '../../services';


@Injectable({
  providedIn: 'root'
})
export class ChemigationPermitService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration
    , private apiService: ApiService) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitStatusesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<ChemigationPermitStatusDto>>;
    public chemigationPermitStatusesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChemigationPermitStatusDto>>>;
    public chemigationPermitStatusesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChemigationPermitStatusDto>>>;
    public chemigationPermitStatusesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChemigationPermitStatusDto>>(`${this.basePath}/chemigationPermitStatuses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param chemigationPermitID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitsChemigationPermitIDDelete(chemigationPermitID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public chemigationPermitsChemigationPermitIDDelete(chemigationPermitID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public chemigationPermitsChemigationPermitIDDelete(chemigationPermitID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public chemigationPermitsChemigationPermitIDDelete(chemigationPermitID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (chemigationPermitID === null || chemigationPermitID === undefined) {
            throw new Error('Required parameter chemigationPermitID was null or undefined when calling chemigationPermitsChemigationPermitIDDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/chemigationPermits/${encodeURIComponent(String(chemigationPermitID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param chemigationPermitID 
     * @param chemigationPermitUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitsChemigationPermitIDPut(chemigationPermitID: number, chemigationPermitUpsertDto?: ChemigationPermitUpsertDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public chemigationPermitsChemigationPermitIDPut(chemigationPermitID: number, chemigationPermitUpsertDto?: ChemigationPermitUpsertDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public chemigationPermitsChemigationPermitIDPut(chemigationPermitID: number, chemigationPermitUpsertDto?: ChemigationPermitUpsertDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public chemigationPermitsChemigationPermitIDPut(chemigationPermitID: number, chemigationPermitUpsertDto?: ChemigationPermitUpsertDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (chemigationPermitID === null || chemigationPermitID === undefined) {
            throw new Error('Required parameter chemigationPermitID was null or undefined when calling chemigationPermitsChemigationPermitIDPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/chemigationPermits/${encodeURIComponent(String(chemigationPermitID))}`,
            chemigationPermitUpsertDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param chemigationPermitNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitsChemigationPermitNumberGet(chemigationPermitNumber: number, observe?: 'body', reportProgress?: boolean): Observable<ChemigationPermitDto>;
    public chemigationPermitsChemigationPermitNumberGet(chemigationPermitNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChemigationPermitDto>>;
    public chemigationPermitsChemigationPermitNumberGet(chemigationPermitNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChemigationPermitDto>>;
    public chemigationPermitsChemigationPermitNumberGet(chemigationPermitNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (chemigationPermitNumber === null || chemigationPermitNumber === undefined) {
            throw new Error('Required parameter chemigationPermitNumber was null or undefined when calling chemigationPermitsChemigationPermitNumberGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ChemigationPermitDto>(`${this.basePath}/chemigationPermits/${encodeURIComponent(String(chemigationPermitNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<ChemigationPermitDetailedDto>>;
    public chemigationPermitsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChemigationPermitDetailedDto>>>;
    public chemigationPermitsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChemigationPermitDetailedDto>>>;
    public chemigationPermitsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChemigationPermitDetailedDto>>(`${this.basePath}/chemigationPermits`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param chemigationPermitNewDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chemigationPermitsPost(chemigationPermitNewDto?: ChemigationPermitNewDto, observe?: 'body', reportProgress?: boolean): Observable<ChemigationPermitDto>;
    public chemigationPermitsPost(chemigationPermitNewDto?: ChemigationPermitNewDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChemigationPermitDto>>;
    public chemigationPermitsPost(chemigationPermitNewDto?: ChemigationPermitNewDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChemigationPermitDto>>;
    public chemigationPermitsPost(chemigationPermitNewDto?: ChemigationPermitNewDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ChemigationPermitDto>(`${this.basePath}/chemigationPermits`,
            chemigationPermitNewDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

}
